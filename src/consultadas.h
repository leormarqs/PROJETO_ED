/*
  TAD RESPONSÁVEL PELO ARMAZENAMENTO DAS PALAVRAS A SEREM CONSULTADAS 
  EM UMA AVL ORDENADA PELA ORDEM ALFABETICA

 */

#include "proximas.h"
#define TAM_PALAVRA 20

//INFORMAÇÃO DE CADA NODO
typedef struct p_cons{
    char palavra[TAM_PALAVRA];
    int  freqA;
}P_CONS;

//ESTRUTURA DO NODO
typedef struct cons{
  struct cons *esq;
  struct cons *dir;
  int FB;
  P_CONS inf;
  NO_PROX *viz;
}NO_CONS;

//INICIALIZA UMA AVL
NO_CONS *inicializaCONS();

//CALCULA A ALTURA DA AVL
int alturaCONS(NO_CONS *);

//CALCULA O BALANCEAMENTO DA AVL
int balanceamentoCONS(NO_CONS *);

//IMPRIME A AVL DEMARCANDO O NIVEL
void imprime_nivelCONS(NO_CONS *, int );

//APLICA ROTAÇÃO
NO_CONS *rotacao_direitaCONS(NO_CONS *);

//APLICA ROTAÇÃO
NO_CONS *rotacao_esquerdaCONS(NO_CONS *);

//APLICA ROTAÇÃO
NO_CONS *rotacao_dupla_direitaCONS(NO_CONS *);

//APLICA ROTAÇÃO
NO_CONS *rotacao_dupla_esquerdaCONS(NO_CONS *);

//VERIFICA NECESSIDADE DE ROTAÇÃO
NO_CONS *caso1CONS(NO_CONS *, int *);

//VERIFICA NECESSIDADE DE ROTAÇÃO
NO_CONS *caso2CONS(NO_CONS *, int *);

//INSERE NA AVL, ORDENANDO PELA ORDEM ALFABÉTICA
NO_CONS* insereCONS(NO_CONS *,NODO * , int *, NODO *);

//LE PALAVRAS A SEREM CONSULTADAS, E INSERE NA AVL DE PALAVRAS A SEREM CONSULTADAS
NO_CONS *busca_palavras(NODO *, NODO *, NO_CONS *);

//CALCULA AS ESTÁTISTICA DE CO-OCORRENCIA DE UMA AVL DE PALAVRAS CONSULTADAS
NO_CONS *calcula_estatCONS(NO_CONS *);

//ABRE ARQUIVO DE SAIDA E GRAVA AS SAIDAS
void grava_arquivo(NO_CONS *, int, char *);

//CONSULTA A ARVORE DE CONSULTADAS, E GRAVA PARA CADA PALAVRA CONSULTADA,
//AS K PALAVRAS COM MAIOR ESTATISTICA DE CO-OCORRENCIA
void imprimeCONS(NO_CONS *, int, FILE *);

//CONSULTA A ARVORE DE CO-OCORRENCIAS E GRAVA AS K PALAVRAS
//COM MAIOR ESTATISTICA NO ARQUIVO FORNECIDO
void imprimeSUG(NO_PROX *, int *, int, FILE *);

//GRAVA OS TEMPOS DE EXECUÇÃO NO ARQUIVO DE SAIDA
void grava_tempos(clock_t [], char *);
