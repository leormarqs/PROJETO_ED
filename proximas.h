/* 
   TAD RESPONSÁVEL POR ARMAZENAR AS PALAVRAS DE CO-OCORRÊNCIA 
   PARA CADA PALAVRA PESQUISADA EM UMA AVL
*/

#include "fileread.h"
#define TAM_PALAVRA 20

//INFORMAÇÃO DE CADA NODO
typedef struct prox_palavra{
  char palav[TAM_PALAVRA];
  int  freqAB;
  int  freqB;
  double stat;
}PROX_PALAVRA;

//ESTRUTURA DE CADA NODO
typedef struct prox{
  struct prox *esq;
  struct prox *dir;
  int FB;
  PROX_PALAVRA inf;
}NO_PROX;

//INICIALIZA UMA AVL
NO_PROX *inicializaPROX();

//CALCULA A ALTURA DE UM NODO
int alturaPROX(NO_PROX *);

//CALCULA O BALANCEAMENTO DE UMA ARVORE
int balanceamentoPROX(NO_PROX *);

//IMPRIME A ARVORE DEMARCANDO OS NIVEIS DO NODO
void imprime_nivelPROX(NO_PROX *, int );

//APLICA ROTAÇÃO A DIREITA EM UM NODO
NO_PROX *rotacao_direitaPROX(NO_PROX *);

//APLICA ROTAÇÃO A ESQUERDA EM UM NODO
NO_PROX *rotacao_esquerdaPROX(NO_PROX *);

//APLICA ROTAÇÃO DUPLA DIREITA EM UM NODO
NO_PROX *rotacao_dupla_direitaPROX(NO_PROX *);

//APLICA ROTAÇÃO DUPLA ESQUERDA EM UM NODO
NO_PROX *rotacao_dupla_esquerdaPROX(NO_PROX *);

//VERIFICA NECESSIDADE DE ROTAÇÃO
NO_PROX *caso1PROX(NO_PROX *, int *);

//VERIFICA NECESSIDADE DE ROTAÇÃO
NO_PROX *caso2PROX(NO_PROX *, int *);

//INSERE UMA PALAVRA EM UMA AVL COM CHAVE PELA ORDEM ALFABETICA
NO_PROX* inserePROX(NO_PROX *,NODO * , int *, NODO *);

//INSERE UMA PALAVRA EM UMA AVL COM CHAVE PELA ESTATISTICA DE CO-OCORRENCIA
NO_PROX* insereSTAT(NO_PROX *, PROX_PALAVRA , int *);

//CALCULA A ESTATITICA DE CO-OCORRENCIA DE CADA PALAVRA DE UMA ARVORE
NO_PROX *calcula_estatPROX(int, NO_PROX *);

//CONVERTE UMA ARVORE COM CHAVE PELA ORDEM ALFABETICA
//PARA UMA ARVORE COM CHAVE PELE ESTATISTICA
NO_PROX *organizaArvore(NO_PROX *, NO_PROX *);
